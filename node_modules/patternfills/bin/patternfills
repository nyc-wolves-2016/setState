#!/usr/bin/env node
var PatternBuilder = require('../src/pattern_builder.js');
var program = require('commander');
var fs = require('fs');
var path = require('path');

program
  .version('0.3.1')
  .usage('[options]')

  // format of output
  .option('-f, --format [value]', 'svg|css|files (required)')

  // input patterns
  .option('-s, --source [value]', 'pattern/directory (optional. built in patterns used by default)')

  // output patterns
  .option('-d, --dest [value]', 'output file or directory for files (optional. Will go to stdout otherwise.)')

  // color customization
  .option('-b, --background [value]', 'background color (optional. white by default)')
  .option('-g, --foreground [value]', 'foreground color (optional. black by default)');

program.parse(process.argv);

var colors = {};
if (program.background) colors.background = program.background;
if (program.foreground) colors.foreground = program.foreground;

var source;
if (program.source) {
  if ( ! path.isAbsolute(program.source) ) {
    source = path.resolve( process.cwd(), program.source );
  } else {
    source = program.source;
  }
} else {
  source = path.join(__dirname, "../src/patterns/");
}

var builder = new PatternBuilder(source, colors);
var patterns = builder.getAllPatternData();
var skipwrite = false;
var Converter, converterInstance, output;
if (program.format && program.format === "svg") {

  Converter = require('../src/output/output_svg.js');
  converterInstance =  new Converter(patterns);
  output = converterInstance.patternSvg();

} else if (program.format && program.format === "css") {

  Converter = require('../src/output/output_css.js');
  converterInstance =  new Converter(patterns);
  output = converterInstance.patternCss();

} else if (program.format && program.format === "files") {

  Converter = require('../src/output/output_svg.js');
  converterInstance =  new Converter(patterns);

  converterInstance.writeFiles(program.dest);
  skipwrite = true;

} else {
  console.error("Format is required! Pass one using -f or --format. It should be set to 'svg' or 'css'");
  process.exit(1);
}

if (!program.dest & !skipwrite) {
  process.stdout.write(output);
} else if (!skipwrite) {
  var stream = fs.createWriteStream(program.dest);
  stream.once('open', function(fd) {
    stream.write(output);
    stream.end();
  });
}